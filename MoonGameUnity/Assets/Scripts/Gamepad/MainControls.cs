//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Gamepad/MainControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainControls"",
    ""maps"": [
        {
            ""name"": ""ActionsPlayerMap"",
            ""id"": ""eb43987b-eddd-47c9-8075-54ac9d9a39fb"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d9d4e1c2-c4d2-4de2-b43c-66f04c788dbc"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mode"",
                    ""type"": ""Button"",
                    ""id"": ""946a74b0-45bb-43c2-b0c5-5b89ac952725"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0f4145ed-eb31-4635-b6f6-54c106430fd2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5d374cd-033d-4d7a-9a63-24f11d548323"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ActionsPlayerMap
        m_ActionsPlayerMap = asset.FindActionMap("ActionsPlayerMap", throwIfNotFound: true);
        m_ActionsPlayerMap_Move = m_ActionsPlayerMap.FindAction("Move", throwIfNotFound: true);
        m_ActionsPlayerMap_Mode = m_ActionsPlayerMap.FindAction("Mode", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ActionsPlayerMap
    private readonly InputActionMap m_ActionsPlayerMap;
    private IActionsPlayerMapActions m_ActionsPlayerMapActionsCallbackInterface;
    private readonly InputAction m_ActionsPlayerMap_Move;
    private readonly InputAction m_ActionsPlayerMap_Mode;
    public struct ActionsPlayerMapActions
    {
        private @MainControls m_Wrapper;
        public ActionsPlayerMapActions(@MainControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_ActionsPlayerMap_Move;
        public InputAction @Mode => m_Wrapper.m_ActionsPlayerMap_Mode;
        public InputActionMap Get() { return m_Wrapper.m_ActionsPlayerMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionsPlayerMapActions set) { return set.Get(); }
        public void SetCallbacks(IActionsPlayerMapActions instance)
        {
            if (m_Wrapper.m_ActionsPlayerMapActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_ActionsPlayerMapActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_ActionsPlayerMapActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_ActionsPlayerMapActionsCallbackInterface.OnMove;
                @Mode.started -= m_Wrapper.m_ActionsPlayerMapActionsCallbackInterface.OnMode;
                @Mode.performed -= m_Wrapper.m_ActionsPlayerMapActionsCallbackInterface.OnMode;
                @Mode.canceled -= m_Wrapper.m_ActionsPlayerMapActionsCallbackInterface.OnMode;
            }
            m_Wrapper.m_ActionsPlayerMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Mode.started += instance.OnMode;
                @Mode.performed += instance.OnMode;
                @Mode.canceled += instance.OnMode;
            }
        }
    }
    public ActionsPlayerMapActions @ActionsPlayerMap => new ActionsPlayerMapActions(this);
    public interface IActionsPlayerMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMode(InputAction.CallbackContext context);
    }
}
